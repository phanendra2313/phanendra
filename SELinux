https://www.thegeekdiary.com/beginners-guide-to-selinux/

https://en.wikipedia.org/wiki/Security-Enhanced_Linux

SELinux stands for “Security-Enhanced Linux“. Standard Linux security is based on Discretionary Access Control (DAC)

SELinux was created by the US National Security Agency to provide a finer-grained level of control over files, processes, 
users, and applications in the system. It is an enhancement to the Linux kernel, and it implements a different type of security called 
Mandatory Access Control (MAC). MAC policy is centrally managed rather than being managed by the user.

Enforcing: Access is denied to users and programs unless permitted by SELinux security policy rules.
Permissive: The security policy rules are not enforced, but SELinux sends denial messages to a log file.
Disabled: SELinux does not enforce a security policy because no policy is loaded in the kernel. Only DAC rules are used for access control.

#sestatus 
#getenforce 
#setenforce

SELinux also provides “Booleans“, which allow parts of a SELinux policy to be changed at run time, 
without reloading or recompiling a SELinux policy. You can display a list of Booleans as 
# semanage boolean -l
# setsebool ftpd_use_nfs on
# getsebool ftpd_use_nfs

Users, policies and security contexts
SELinux users and roles do not have to be related to the actual system users and roles. For every current user or process, 
SELinux assigns a three string context consisting of a username, role, and domain (or type). This system is more flexible 
than normally required: as a rule, most of the real users share the same SELinux username, and all access control is managed 
through the third tag, the domain. The circumstances under which a process is allowed into a certain domain must be configured 
in the policies. The command runcon allows for the launching of a process into an explicitly specified context 
(user, role, and domain), but SELinux may deny the transition if it is not approved by the policy.

SELinux adds the -Z switch to the shell commands ls, ps, and some others, allowing the security context of the files or process to be seen.

Typical policy rules consist of explicit permissions, for example, which domains the user must possess 
to perform certain actions with the given target (read, execute, or, in case of network port, bind or connect), and so on
